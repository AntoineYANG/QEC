{"version":3,"sources":["Components/WindowButton.tsx","Shared/ElectronAPI.ts","Components/Header.tsx","Shared/Listeners.ts","Components/NewCommand.tsx","WindowAppearance/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["WindowButton","props","title","name","className","onClick","trigger","width","height","viewBox","d","path","win","window","isWindowMaximized","ElectronWindowIsMaximized","Header","state","key","style","margin","display","transform","fontWeight","fontSize","overflow","textOverflow","minimize","maximize","unmaximize","close","on","forceUpdate","Component","keyMap","8","9","13","16","17","18","27","32","37","38","39","40","48","49","50","51","52","53","54","55","56","57","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","186","187","188","189","190","191","192","219","220","221","222","keyStack","getActiveKeys","map","join","hotKeyListeners","addHotKey","target","keys","callback","priority","keyset","removeHotKey","initHotKeyListeners","blockAllDefaultBehaviours","$","tabIndex","addEventListener","e","which","preventDefault","push","listener","i","length","keyStackSwp","flagSkip","j","reverse","onblur","onfocus","NewCommand","containerID","active","Math","floor","random","id","this","position","bottom","left","alignItems","justifyContent","onKeyDown","stopPropagation","type","border","minHeight","padding","val","focus","setState","Main","newCommand","React","createRef","ref","current","create","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dd1dba80.chunk.js","sourcesContent":["/*\r\n * @Author: Kanata You \r\n * @Date: 2020-10-21 21:35:28 \r\n * @Last Modified by: Kanata You\r\n * @Last Modified time: 2020-10-22 00:21:24\r\n */\r\n\r\nimport React from \"react\";\r\n\r\n\r\nexport interface WindowButtonProps {\r\n    name: string;\r\n    path: string;\r\n    trigger: () => void;\r\n};\r\n\r\nexport const WindowButton = (props: WindowButtonProps): JSX.Element => {\r\n    return (\r\n        <div title={ props.name } className=\"windowbutton\" onClick={ props.trigger } >\r\n            <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" >\r\n                <path d={ props.path } />\r\n            </svg>\r\n        </div>\r\n    );\r\n};\r\n","/*\r\n * @Author: Kanata You \r\n * @Date: 2020-10-21 23:51:49 \r\n * @Last Modified by: Kanata You\r\n * @Last Modified time: 2020-10-22 00:23:08\r\n */\r\n\r\nimport { BrowserWindow } from \"electron\";\r\n\r\n\r\nconst win: BrowserWindow = (window as any)['win'];\r\n\r\n\r\nexport const getWindow = () => win;\r\n\r\n\r\nexport const ElectronMinimize = () => {\r\n    win.minimize();\r\n};\r\n\r\nlet isWindowMaximized: boolean = false;\r\n\r\nexport const ElectronMaximize = () => {\r\n    if (isWindowMaximized) {\r\n        win.maximize();\r\n    } else {\r\n        win.unmaximize();\r\n    }\r\n    isWindowMaximized = !isWindowMaximized;\r\n};\r\n\r\nexport const ElectronWindowIsMaximized = () => isWindowMaximized;\r\n\r\n\r\nexport const ElectronClose = () => {\r\n    win.close();\r\n};\r\n","/*\r\n * @Author: Kanata You \r\n * @Date: 2020-10-21 20:21:11 \r\n * @Last Modified by: Kanata You\r\n * @Last Modified time: 2020-10-22 00:23:16\r\n */\r\n\r\nimport React, { Component } from \"react\";\r\nimport { WindowButton } from \"./WindowButton\";\r\nimport { getWindow, ElectronWindowIsMaximized, ElectronMinimize, ElectronMaximize, ElectronClose } from \"../Shared/ElectronAPI\";\r\n\r\n\r\nexport interface HeaderProps {};\r\n\r\nexport interface HeaderState {};\r\n\r\nexport class Header extends Component<HeaderProps, HeaderState> {\r\n\r\n    public constructor(props: HeaderProps) {\r\n        super(props);\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div className=\"header\" >\r\n                <div key=\"left\" className=\"header-strip\" >\r\n                    <label key=\"icon\" className=\"header-item\" style={{\r\n                        width: \"16.1px\",\r\n                        height: \"16.1px\",\r\n                        margin: \"0 7px\",\r\n                        display: \"inline-block\",\r\n                        transform: \"translateY(-2px)\",\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"119%\"\r\n                    }} >\r\n                        Z\r\n                    </label>\r\n                    <label key=\"filename\" className=\"header-btn-groups\" style={{\r\n                        height: \"16.1px\",\r\n                        display: \"inline-block\",\r\n                        transform: \"translateY(1.8px)\",\r\n                        margin: \"0 2em\",\r\n                        width: \"35vw\",\r\n                        overflow: \"hidden\",\r\n                        textOverflow: \"ellipsis\"\r\n                    }} >\r\n                        Start with new file\r\n                    </label>\r\n                </div>\r\n                <div key=\"right\" className=\"header-btn-groups\" >\r\n                    <WindowButton key=\"minimize\" name=\"minimize\"\r\n                    path=\"M28,50 L72,50\"\r\n                    trigger={\r\n                        () => {\r\n                            ElectronMinimize();\r\n                        }\r\n                    } />\r\n                    <WindowButton key=\"maximize\" name={\r\n                        ElectronWindowIsMaximized ? \"maximize\" : \"unmaximize\"\r\n                    }\r\n                    path={\r\n                        ElectronWindowIsMaximized ? (\r\n                            \"M28,46 L60,46 L60,70 L28,70 Z M38,36 L70,36 L70,58 L38,58 Z\"\r\n                        ) : \"M30,34 L70,34 L70,69 L30,69 Z\"\r\n                    }\r\n                    trigger={\r\n                        () => {\r\n                            ElectronMaximize();\r\n                        }\r\n                    } />\r\n                    <WindowButton key=\"close\" name=\"close\"\r\n                    path=\"M32,32 L68,68 M32,68 L68,32\"\r\n                    trigger={\r\n                        () => {\r\n                            ElectronClose();\r\n                        }\r\n                    } />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        getWindow()?.on(\"maximize\", () => this.forceUpdate());\r\n    }\r\n\r\n};\r\n","/*\r\n * @Author: Kanata You \r\n * @Date: 2020-10-21 22:31:38 \r\n * @Last Modified by: Kanata You\r\n * @Last Modified time: 2020-10-22 02:32:29\r\n */\r\n\r\nimport $ from \"jquery\";\r\n\r\n\r\nexport type KeyName = (\r\n    'esc' | '`' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '0' | '-' | '+' |\r\n    'backspace' | 'tab' | 'Q' | 'W' | 'E' | 'R' | 'T' | 'Y' | 'U' | 'I' | 'O' | 'P' | '[' |\r\n    ']' | '\\\\' | 'A' | 'S' | 'D' | 'F' | 'G' | 'H' | 'J' | 'K' | 'L' | ';' | '\\'' | 'enter' |\r\n    'shift' | 'Z' | 'X' | 'C' | 'V' | 'B' | 'N' | 'M' | ',' | '.' | '/' | 'ctrl' | 'alt' |\r\n    'space' | 'left' | 'up' | 'down' | 'right'\r\n);\r\n\r\nconst keyMap: {[code: number]: KeyName;} = {\r\n    8: \"backspace\",\r\n    9: \"tab\",\r\n    13: \"enter\",\r\n    16: \"shift\",\r\n    17: \"ctrl\",\r\n    18: \"alt\",\r\n    27: \"esc\",\r\n    32: \"space\",\r\n    37: \"left\",\r\n    38: \"up\",\r\n    39: \"right\",\r\n    40: \"down\",\r\n    48: \"0\",\r\n    49: \"1\",\r\n    50: \"2\",\r\n    51: \"3\",\r\n    52: \"4\",\r\n    53: \"5\",\r\n    54: \"6\",\r\n    55: \"7\",\r\n    56: \"8\",\r\n    57: \"9\",\r\n    65: \"A\",\r\n    66: \"B\",\r\n    67: \"C\",\r\n    68: \"D\",\r\n    69: \"E\",\r\n    70: \"F\",\r\n    71: \"G\",\r\n    72: \"H\",\r\n    73: \"I\",\r\n    74: \"J\",\r\n    75: \"K\",\r\n    76: \"L\",\r\n    77: \"M\",\r\n    78: \"N\",\r\n    79: \"O\",\r\n    80: \"P\",\r\n    81: \"Q\",\r\n    82: \"R\",\r\n    83: \"S\",\r\n    84: \"T\",\r\n    85: \"U\",\r\n    86: \"V\",\r\n    87: \"W\",\r\n    88: \"X\",\r\n    89: \"Y\",\r\n    90: \"Z\",\r\n    186: \";\",\r\n    187: \"+\",\r\n    188: \",\",\r\n    189: \"-\",\r\n    190: \".\",\r\n    191: \"/\",\r\n    192: \"`\",\r\n    219: \"[\",\r\n    220: \"\\\\\",\r\n    221: \"]\",\r\n    222: \"'\"\r\n};\r\n\r\nlet keyStack: Array<[KeyName, boolean]> = [];\r\n\r\nexport const getActiveKeys = () => keyStack.map(key => key[0]).join(\"+\");\r\n\r\n\r\nlet hotKeyListeners: {\r\n    [selector: string]: {[keyset: string]: [() => void, number] | undefined}\r\n} = {};\r\n\r\n\r\nexport const addHotKey = (\r\n    target: string, keys: Array<KeyName>, callback: () => void, priority: number = 1\r\n) => {\r\n    const keyset: string = keys.join(\"+\");\r\n    if (hotKeyListeners[target][keyset] === void 0 || hotKeyListeners[target][keyset]![1] < priority) {\r\n        hotKeyListeners[target][keyset] = [callback, priority];\r\n        return true;\r\n    }\r\n    \r\n    return false;\r\n};\r\n\r\nexport const removeHotKey = (target: string, keys: Array<KeyName>) => {\r\n    const keyset: string = keys.join(\"+\");\r\n    hotKeyListeners[target][keyset] = void 0;\r\n};\r\n\r\n\r\nexport const initHotKeyListeners = (target: string, blockAllDefaultBehaviours: boolean = true) => {\r\n    $(target)[0].tabIndex = 1;\r\n    \r\n    $(target)[0].addEventListener(\"keydown\", (e: KeyboardEvent) => {\r\n        const key: KeyName | undefined = keyMap[e.which];\r\n        if (blockAllDefaultBehaviours && key) {\r\n            e.preventDefault();\r\n        }\r\n        keyStack.push([key, true]);\r\n    });\r\n    \r\n    $(target)[0].addEventListener(\"keyup\", (e: KeyboardEvent) => {\r\n        const key: KeyName | undefined = keyMap[e.which];\r\n        if (blockAllDefaultBehaviours) {\r\n            e.preventDefault();\r\n        }\r\n        if (key) {\r\n            const listener = hotKeyListeners[target][getActiveKeys()];\r\n            if (listener) {\r\n                listener[0]();\r\n            }\r\n            for (let i: number = keyStack.length - 1; i >= 0; i--) {\r\n                if (keyStack[i][0] === key && keyStack[i][1]) {\r\n                    if (i === keyStack.length - 1) {\r\n                        let keyStackSwp: [KeyName, boolean][] = [];\r\n                        let flagSkip: boolean = true;\r\n                        for (let j = i - 1; j >= 0; j--) {\r\n                            if (!flagSkip || keyStack[j][1]) {\r\n                                keyStackSwp.push(keyStack[j]);\r\n                                flagSkip = false;\r\n                            }\r\n                        }\r\n                        keyStack = keyStackSwp.reverse();\r\n                    } else {\r\n                        keyStack[i][1] = false;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    hotKeyListeners[target] = {};\r\n};\r\n\r\ninitHotKeyListeners(\"body\");\r\n\r\n\r\nwindow.onblur = () => {\r\n    keyStack = [];\r\n};\r\n\r\nwindow.onfocus = () => {\r\n    keyStack = [];\r\n};\r\n","/*\r\n * @Author: Kanata You \r\n * @Date: 2020-10-22 00:32:54 \r\n * @Last Modified by: Kanata You\r\n * @Last Modified time: 2020-10-22 02:31:30\r\n */\r\n\r\nimport React, { Component } from \"react\";\r\nimport $ from \"jquery\";\r\nimport { addHotKey, removeHotKey, initHotKeyListeners } from \"../Shared/Listeners\";\r\n\r\n\r\nexport interface NewCommandProps {};\r\n\r\nexport interface NewCommandState {\r\n    active: boolean;\r\n};\r\n\r\nexport class NewCommand extends Component<NewCommandProps, NewCommandState> {\r\n\r\n    protected containerID: number;\r\n\r\n    public constructor(props: NewCommandProps) {\r\n        super(props);\r\n        this.state = {\r\n            active: false\r\n        };\r\n\r\n        this.containerID = Math.floor(Math.random() * 1000000);\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div id={ `command-box-${ this.containerID }` } style={{\r\n                display: this.state.active ? \"flex\" : \"none\",\r\n                position: \"absolute\",\r\n                bottom: \"40px\",\r\n                left: 0,\r\n                width: \"100vw\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\"\r\n            }}\r\n            onKeyDown={\r\n                e => {\r\n                    e.stopPropagation();\r\n                }\r\n            } >\r\n                <input className=\"command-box\" type=\"text\"\r\n                name={ `command-input-${ this.containerID }` }\r\n                style={{\r\n                    border: \"1px solid white\",\r\n                    width: \"calc(100vw - 200px)\",\r\n                    minHeight: \"1em\",\r\n                    padding: \"6px 12px\"\r\n                }} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        initHotKeyListeners(`#command-box-${ this.containerID }`, false);\r\n        \r\n        addHotKey(`#command-box-${ this.containerID }`, [\"esc\"], () => {\r\n            this.close();\r\n        }, 10);\r\n    }\r\n\r\n    public componentDidUpdate(): void {\r\n        if (this.state.active) {\r\n            $(`#command-box-${ this.containerID } input`).val(\"\").focus();\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        removeHotKey(`#command-box-${ this.containerID }`, [\"esc\"]);\r\n    }\r\n\r\n    public create(): void {\r\n        if (!this.state.active) {\r\n            $(`#command-box-${ this.containerID } input`).val(\"\");\r\n            this.setState({\r\n                active: true\r\n            });\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (this.state.active) {\r\n            $(`#command-box-${ this.containerID } input`).val(\"\");\r\n            this.setState({\r\n                active: false\r\n            });\r\n        }\r\n    }\r\n\r\n};\r\n","/*\r\n * @Author: Kanata You \r\n * @Date: 2020-10-21 20:18:13 \r\n * @Last Modified by: Kanata You\r\n * @Last Modified time: 2020-10-22 00:48:21\r\n */\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Header } from \"../Components/Header\";\r\nimport { addHotKey, removeHotKey } from \"../Shared/Listeners\";\r\nimport { NewCommand } from \"../Components/NewCommand\";\r\n\r\n\r\nexport interface MainProps {};\r\n\r\nexport interface MainState {};\r\n\r\nexport class Main extends Component<MainProps, MainState> {\r\n\r\n    protected newCommand: React.RefObject<NewCommand>;\r\n\r\n    public constructor(props: MainProps) {\r\n        super(props);\r\n\r\n        this.state = {};\r\n\r\n        this.newCommand = React.createRef<NewCommand>();\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div className=\"container\" >\r\n                <Header />\r\n                <NewCommand ref={ this.newCommand } />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        addHotKey(\"body\", [\"ctrl\", \"enter\"], () => {\r\n            this.newCommand.current?.create();\r\n        }, 5);\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        removeHotKey(\"body\", [\"ctrl\", \"enter\"]);\r\n    }\r\n\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport { Main } from './WindowAppearance/Main';\n\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}