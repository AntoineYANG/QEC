{"version":3,"sources":["Components/WindowButton.tsx","Components/Header.tsx","Shared/Listeners.ts","Handlers/CommandParser.ts","Components/AutoCompleter.tsx","Components/NewCommand.tsx","WindowAppearance/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["WindowButton","props","title","name","className","onClick","trigger","width","height","viewBox","d","path","Header","state","key","style","margin","display","transform","fontWeight","fontSize","overflow","textOverflow","Component","keyMap","8","9","13","16","17","18","27","32","37","38","39","40","48","49","50","51","52","53","54","55","56","57","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","186","187","188","189","190","191","192","219","220","221","222","keyStack","getActiveKeys","map","join","hotKeyListeners","addHotKey","target","keys","callback","priority","keyset","removeHotKey","initHotKeyListeners","blockAllDefaultBehaviours","$","tabIndex","addEventListener","e","which","preventDefault","length","push","listener","i","keyStackSwp","flagSkip","j","reverse","window","onblur","onfocus","ipc","require","ipcRenderer","CommandDict","op","params","description","autoComplete","input","reply","sendSync","console","log","args","requireValue","execute","_paramParser","opdir","_input","opwsp","AutoCompleter","active","x","y","list","currentParam","focusIdx","currentRef","value","includes","split","paramIdx","argName","argWaitingForValue","slice","forEach","b","argSet","filter","a","setState","pattern","RegExp","Object","keyname","test","currentCmd","this","currentDescr","zIndex","position","left","bottom","innerHeight","pointerEvents","flexDirection","color","border","borderBottom","padding","background","borderTop","marginTop","item","NewCommand","containerID","history","historyIdx","historyLock","Math","floor","random","id","alignItems","justifyContent","onKeyDown","stopPropagation","type","spellCheck","onChange","parse","val","minHeight","close","autoCompleter","getRef","trimLeft","curParam","getter","cmd","getParam","p","getArgs","parseParams","check","run","focus","hide","offset","replace","show","top","command","Main","newCommand","React","createRef","ref","current","create","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a0e96495.chunk.js","sourcesContent":["/*\r\n * @Author: Kanata You \r\n * @Date: 2020-10-21 21:35:28 \r\n * @Last Modified by: Kanata You\r\n * @Last Modified time: 2020-10-22 00:21:24\r\n */\r\n\r\nimport React from \"react\";\r\n\r\n\r\nexport interface WindowButtonProps {\r\n    name: string;\r\n    path: string;\r\n    trigger: () => void;\r\n};\r\n\r\nexport const WindowButton = (props: WindowButtonProps): JSX.Element => {\r\n    return (\r\n        <div title={ props.name } className=\"windowbutton\" onClick={ props.trigger } >\r\n            <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" >\r\n                <path d={ props.path } />\r\n            </svg>\r\n        </div>\r\n    );\r\n};\r\n","/*\r\n * @Author: Kanata You \r\n * @Date: 2020-10-21 20:21:11 \r\n * @Last Modified by: Kanata You\r\n * @Last Modified time: 2020-11-02 20:54:13\r\n */\r\n\r\nimport React, { Component } from \"react\";\r\nimport { WindowButton } from \"./WindowButton\";\r\n\r\n\r\nexport interface HeaderProps {};\r\n\r\nexport interface HeaderState {};\r\n\r\nexport class Header extends Component<HeaderProps, HeaderState> {\r\n\r\n    public constructor(props: HeaderProps) {\r\n        super(props);\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div className=\"header\" >\r\n                <div key=\"left\" className=\"header-strip\" >\r\n                    <label key=\"icon\" className=\"header-item\" style={{\r\n                        width: \"16.1px\",\r\n                        height: \"16.1px\",\r\n                        margin: \"0 7px\",\r\n                        display: \"inline-block\",\r\n                        transform: \"translateY(-2px)\",\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"119%\"\r\n                    }} >\r\n                        Z\r\n                    </label>\r\n                    <label key=\"filename\" className=\"header-btn-groups\" style={{\r\n                        height: \"16.1px\",\r\n                        display: \"inline-block\",\r\n                        transform: \"translateY(1.8px)\",\r\n                        margin: \"0 2em\",\r\n                        width: \"35vw\",\r\n                        overflow: \"hidden\",\r\n                        textOverflow: \"ellipsis\"\r\n                    }} >\r\n                        Start with new file\r\n                    </label>\r\n                </div>\r\n                <div key=\"right\" className=\"header-btn-groups\" >\r\n                    <WindowButton key=\"minimize\" name=\"minimize\"\r\n                    path=\"M28,50 L72,50\"\r\n                    trigger={\r\n                        () => {\r\n                            // ElectronMinimize();\r\n                        }\r\n                    } />\r\n                    <WindowButton key=\"maximize\" name={\r\n                        0 ? \"maximize\" : \"unmaximize\"\r\n                    }\r\n                    path={\r\n                        0 ? (\r\n                            \"M28,46 L60,46 L60,70 L28,70 Z M38,36 L70,36 L70,58 L38,58 Z\"\r\n                        ) : \"M30,34 L70,34 L70,69 L30,69 Z\"\r\n                    }\r\n                    trigger={\r\n                        () => {\r\n                            // ElectronMaximize();\r\n                        }\r\n                    } />\r\n                    <WindowButton key=\"close\" name=\"close\"\r\n                    path=\"M32,32 L68,68 M32,68 L68,32\"\r\n                    trigger={\r\n                        () => {\r\n                            // ElectronClose();\r\n                        }\r\n                    } />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        // getWindow()?.on(\"maximize\", () => this.forceUpdate());\r\n    }\r\n\r\n};\r\n","/*\r\n * @Author: Kanata You \r\n * @Date: 2020-10-21 22:31:38 \r\n * @Last Modified by: Kanata You\r\n * @Last Modified time: 2020-10-28 20:45:45\r\n */\r\n\r\nimport $ from \"jquery\";\r\n\r\n\r\nexport type KeyName = (\r\n    'esc' | '`' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '0' | '-' | '+' |\r\n    'backspace' | 'tab' | 'Q' | 'W' | 'E' | 'R' | 'T' | 'Y' | 'U' | 'I' | 'O' | 'P' | '[' |\r\n    ']' | '\\\\' | 'A' | 'S' | 'D' | 'F' | 'G' | 'H' | 'J' | 'K' | 'L' | ';' | '\\'' | 'enter' |\r\n    'shift' | 'Z' | 'X' | 'C' | 'V' | 'B' | 'N' | 'M' | ',' | '.' | '/' | 'ctrl' | 'alt' |\r\n    'space' | 'left' | 'up' | 'down' | 'right'\r\n);\r\n\r\nconst keyMap: {[code: number]: KeyName;} = {\r\n    8: \"backspace\",\r\n    9: \"tab\",\r\n    13: \"enter\",\r\n    16: \"shift\",\r\n    17: \"ctrl\",\r\n    18: \"alt\",\r\n    27: \"esc\",\r\n    32: \"space\",\r\n    37: \"left\",\r\n    38: \"up\",\r\n    39: \"right\",\r\n    40: \"down\",\r\n    48: \"0\",\r\n    49: \"1\",\r\n    50: \"2\",\r\n    51: \"3\",\r\n    52: \"4\",\r\n    53: \"5\",\r\n    54: \"6\",\r\n    55: \"7\",\r\n    56: \"8\",\r\n    57: \"9\",\r\n    65: \"A\",\r\n    66: \"B\",\r\n    67: \"C\",\r\n    68: \"D\",\r\n    69: \"E\",\r\n    70: \"F\",\r\n    71: \"G\",\r\n    72: \"H\",\r\n    73: \"I\",\r\n    74: \"J\",\r\n    75: \"K\",\r\n    76: \"L\",\r\n    77: \"M\",\r\n    78: \"N\",\r\n    79: \"O\",\r\n    80: \"P\",\r\n    81: \"Q\",\r\n    82: \"R\",\r\n    83: \"S\",\r\n    84: \"T\",\r\n    85: \"U\",\r\n    86: \"V\",\r\n    87: \"W\",\r\n    88: \"X\",\r\n    89: \"Y\",\r\n    90: \"Z\",\r\n    186: \";\",\r\n    187: \"+\",\r\n    188: \",\",\r\n    189: \"-\",\r\n    190: \".\",\r\n    191: \"/\",\r\n    192: \"`\",\r\n    219: \"[\",\r\n    220: \"\\\\\",\r\n    221: \"]\",\r\n    222: \"'\"\r\n};\r\n\r\nlet keyStack: Array<[KeyName, boolean]> = [];\r\n\r\nexport const getActiveKeys = () => keyStack.map(key => key[0]).join(\"+\");\r\n\r\n\r\nlet hotKeyListeners: {\r\n    [selector: string]: {[keyset: string]: [() => void, number] | undefined}\r\n} = {};\r\n\r\n\r\nexport const addHotKey = (\r\n    target: string, keys: Array<KeyName>, callback: () => void, priority: number = 1\r\n) => {\r\n    const keyset: string = keys.join(\"+\");\r\n    if (hotKeyListeners[target][keyset] === void 0 || hotKeyListeners[target][keyset]![1] < priority) {\r\n        hotKeyListeners[target][keyset] = [callback, priority];\r\n        return true;\r\n    }\r\n    \r\n    return false;\r\n};\r\n\r\nexport const removeHotKey = (target: string, keys: Array<KeyName>) => {\r\n    const keyset: string = keys.join(\"+\");\r\n    hotKeyListeners[target][keyset] = void 0;\r\n};\r\n\r\n\r\nexport const initHotKeyListeners = (target: string, blockAllDefaultBehaviours: boolean = true) => {\r\n    $(target)[0].tabIndex = 1;\r\n    \r\n    $(target)[0].addEventListener(\"keydown\", (e: KeyboardEvent) => {\r\n        const key: KeyName | undefined = keyMap[e.which];\r\n        if (key === \"tab\" || (blockAllDefaultBehaviours && key)) {\r\n            e.preventDefault();\r\n        }\r\n        if (!keyStack.length || keyStack[keyStack.length - 1][0] !== key) {\r\n            keyStack.push([key, true]);\r\n        }\r\n    });\r\n    \r\n    $(target)[0].addEventListener(\"keyup\", (e: KeyboardEvent) => {\r\n        const key: KeyName | undefined = keyMap[e.which];\r\n        if (blockAllDefaultBehaviours) {\r\n            e.preventDefault();\r\n        }\r\n        if (key) {\r\n            const listener = hotKeyListeners[target][getActiveKeys()];\r\n            if (listener) {\r\n                listener[0]();\r\n            }\r\n            for (let i: number = keyStack.length - 1; i >= 0; i--) {\r\n                if (keyStack[i][0] === key && keyStack[i][1]) {\r\n                    if (i === keyStack.length - 1) {\r\n                        let keyStackSwp: [KeyName, boolean][] = [];\r\n                        let flagSkip: boolean = true;\r\n                        for (let j = i - 1; j >= 0; j--) {\r\n                            if (!flagSkip || keyStack[j][1]) {\r\n                                keyStackSwp.push(keyStack[j]);\r\n                                flagSkip = false;\r\n                            }\r\n                        }\r\n                        keyStack = keyStackSwp.reverse();\r\n                    } else {\r\n                        keyStack[i][1] = false;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    hotKeyListeners[target] = {};\r\n};\r\n\r\ninitHotKeyListeners(\"body\");\r\n\r\n\r\nwindow.onblur = () => {\r\n    keyStack = [];\r\n};\r\n\r\nwindow.onfocus = () => {\r\n    keyStack = [];\r\n};\r\n","/*\r\n * @Author: Kanata You \r\n * @Date: 2020-10-28 19:20:37 \r\n * @Last Modified by: Kanata You\r\n * @Last Modified time: 2020-11-02 20:54:35\r\n */\r\n\r\nconst ipc = window.require('electron').ipcRenderer;\r\n\r\n\r\nexport type Command<P extends string | never = string, A extends string | never = string> = {\r\n    params: Array<{\r\n        name: P;\r\n        description: string;\r\n        autoComplete?: (input: string) => Array<string>;\r\n    }>;\r\n    args: Array<{\r\n        name: A;\r\n        requireValue: boolean;\r\n        description: string;\r\n        autoComplete?: (input: string) => Array<string>;\r\n    }>;\r\n    description: string;\r\n    execute: (paramParser: ParamParser<P, A>) => void;\r\n};\r\n\r\n\r\nexport const CommandDict: {[name: string]: Command<string | never, string | never>;} = {\r\n    op: {\r\n        params: [{\r\n            name: \"filename\",\r\n            description: \"the file you want to open\",\r\n            autoComplete: (input: string) => {\r\n                if (input) {\r\n                    const reply = ipc.sendSync(\"synchronous-message\", \"close\");\r\n                    console.log(input, reply);\r\n                }\r\n                return [];\r\n            }\r\n        }],\r\n        args: [{\r\n            name: \"-e\",\r\n            requireValue: false,\r\n            description: \"reject if the file does not exist\"\r\n        }, {\r\n            name: \"-clear\",\r\n            requireValue: false,\r\n            description: \"clear the file if it has already exist\"\r\n        }],\r\n        description: \"Open or create a file to edit.\",\r\n        execute: (_paramParser: ParamParser<\"filename\", \"-e\" | \"-clear\">) => {}\r\n    },\r\n    opdir: {\r\n        params: [{\r\n            name: \"foldername\",\r\n            description: \"the folder you want to open\",\r\n            autoComplete: (_input: string) => {\r\n                return [];\r\n            }\r\n        }],\r\n        args: [],\r\n        description: \"Open a folder to edit.\",\r\n        execute: (_paramParser: ParamParser<\"foldername\", never>) => {}\r\n    },\r\n    opwsp: {\r\n        params: [{\r\n            name: \"filename\",\r\n            description: \"the workspace you want to open\",\r\n            autoComplete: (_input: string) => {\r\n                return [];\r\n            }\r\n        }],\r\n        args: [],\r\n        description: \"Open a workspace to edit.\",\r\n        execute: (_paramParser: ParamParser<\"filename\", never>) => {}\r\n    }\r\n};\r\n\r\nexport type ParamParser<P extends string, A extends string> = {\r\n    getParam: (p: P) => string | undefined;\r\n    getArgs: (a: A) => string | undefined | true;\r\n};\r\n\r\nexport const parseParams = <P extends string, A extends string>(cmd: Command, input: string): ParamParser<P, A> => {\r\n    let params: {[name: string]: string} = {};\r\n    let args: {[name: string]: string | true} = {};\r\n\r\n    let paramIdx: number = 0;\r\n    let argName: string | null = null;\r\n    let argWaitingForValue: boolean = false;\r\n    \r\n    input.split(/ {1,}/).slice(1).forEach(b => {\r\n        const argSet = cmd.args.filter(\r\n            a => a.name === b\r\n        );\r\n        if (argSet.length) {\r\n            argName = b;\r\n            if (argSet[0].requireValue) {\r\n                argWaitingForValue = true;\r\n            } else {\r\n                args[argName] = true;\r\n                argWaitingForValue = false;\r\n            }\r\n        } else {\r\n            if (argName && argWaitingForValue) {\r\n                args[argName] = b;\r\n                argWaitingForValue = false;\r\n            } else if (cmd.params[paramIdx]) {\r\n                params[cmd.params[paramIdx].name] = b;\r\n                paramIdx += 1;\r\n                argName = null;\r\n            }\r\n        }\r\n    });\r\n\r\n    return {\r\n        getParam: (p: P) => params[p],\r\n        getArgs: (a: A) => args[a]\r\n    };\r\n};\r\n","/*\r\n * @Author: Kanata You \r\n * @Date: 2020-10-28 20:08:55 \r\n * @Last Modified by: Kanata You\r\n * @Last Modified time: 2020-10-28 20:55:58\r\n */\r\n\r\nimport React, { Component } from \"react\";\r\nimport $ from \"jquery\";\r\nimport { CommandDict } from \"../Handlers/CommandParser\";\r\n\r\n\r\nexport interface AutoCompleterProps {};\r\n\r\nexport interface AutoCompleterState {\r\n    active: boolean;\r\n    x: number;\r\n    y: number;\r\n    list: Array<string>;\r\n    currentParam: null | number | string;\r\n    focusIdx: number;\r\n};\r\n\r\nexport class AutoCompleter extends Component<AutoCompleterProps, AutoCompleterState> {\r\n\r\n    protected static currentRef: AutoCompleter | null = null;\r\n\r\n    public static getRef() {\r\n        return AutoCompleter.currentRef;\r\n    }\r\n\r\n    public static show(value: string, x?: number, y?: number): void {\r\n        if (AutoCompleter.currentRef) {\r\n            if (value.includes(\" \")) {\r\n                const name: string = value.split(\" \")[0];\r\n                if (CommandDict[name]) {\r\n                    let paramIdx: number = 0;\r\n                    let argName: string | null = null;\r\n                    let argWaitingForValue: boolean = false;\r\n                    \r\n                    value.split(/ {1,}/).slice(1).forEach(b => {\r\n                        const argSet = CommandDict[name].args.filter(\r\n                            a => a.name === b\r\n                        );\r\n                        if (argSet.length) {\r\n                            argName = b;\r\n                            argWaitingForValue = argSet[0].requireValue;\r\n                        } else {\r\n                            if (argWaitingForValue) {\r\n                                argWaitingForValue = false;\r\n                            } else {\r\n                                paramIdx += 1;\r\n                                argName = null;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    AutoCompleter.currentRef.setState({\r\n                        list: [name],\r\n                        currentParam: argName ?? paramIdx,\r\n                        active: true,\r\n                        x: x || AutoCompleter.currentRef.state.x,\r\n                        y: y || AutoCompleter.currentRef.state.y\r\n                    });\r\n                } else {\r\n                    AutoCompleter.currentRef.setState({\r\n                        list: [],\r\n                        currentParam: null,\r\n                        active: false\r\n                    });\r\n                }\r\n            } else {\r\n                const pattern = new RegExp(value.split(\"\").join(\".*\"));\r\n\r\n                AutoCompleter.currentRef.setState({\r\n                    list: Object.keys(CommandDict).filter(\r\n                        keyname => pattern.test(keyname)\r\n                    ),\r\n                    currentParam: null,\r\n                    active: true,\r\n                    x: x || AutoCompleter.currentRef.state.x,\r\n                    y: y || AutoCompleter.currentRef.state.y\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    public static hide(): void {\r\n        if (AutoCompleter.currentRef) {\r\n            AutoCompleter.currentRef.setState({\r\n                active: false\r\n            });\r\n        }\r\n    }\r\n\r\n    public constructor(props: AutoCompleterProps) {\r\n        super(props);\r\n        this.state = {\r\n            active: false,\r\n            x: 200,\r\n            y: 200,\r\n            list: [],\r\n            currentParam: null,\r\n            focusIdx: 0\r\n        };\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        const currentCmd = CommandDict[this.state.list[this.state.focusIdx]];\r\n\r\n        let currentDescr: string = \"\";\r\n\r\n        if (currentCmd && this.state.currentParam !== null) {\r\n            if (typeof this.state.currentParam === \"string\") {\r\n                currentDescr = currentCmd.args.filter(\r\n                    d => d.name === this.state.currentParam\r\n                )[0].description;\r\n            } else if (currentCmd.params.length > this.state.currentParam - 1) {\r\n                currentDescr = currentCmd.params[this.state.currentParam - 1].description;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div style={{\r\n                zIndex: 10000,\r\n                position: \"fixed\",\r\n                left: this.state.x,\r\n                bottom: $(window).innerHeight()! - this.state.y,\r\n                pointerEvents: \"none\",\r\n                display: this.state.active && this.state.list.length ? \"flex\" : \"none\",\r\n                flexDirection: \"column\"\r\n            }} >\r\n                {\r\n                    currentCmd ? (\r\n                        <div key=\"detail\" style={{\r\n                            color: \"rgb(64,172,225)\",\r\n                            border: `1px solid rgb(91,95,97)`,\r\n                            borderBottom: \"none\",\r\n                            padding: \"0.3em 0.7em\",\r\n                            width: \"32.6em\",\r\n                            background: `rgb(26,29,33)`\r\n                        }} >\r\n                            <label>\r\n                                <span key=\"name\" >\r\n                                    { this.state.list[this.state.focusIdx] + \" \" }\r\n                                </span>\r\n                                {\r\n                                    currentCmd.params.map(\r\n                                        (d, i) => (\r\n                                            i + 1 === this.state.currentParam ? (\r\n                                                <span key={ `param_${ i }` } >\r\n                                                    <b>\r\n                                                        { \" \" }\r\n                                                        <u>\r\n                                                            { `[${ d.name }]` }\r\n                                                        </u>\r\n                                                    </b>\r\n                                                </span>\r\n                                            ) : (\r\n                                                <span key={ `param_${ i }` } >\r\n                                                    { ` [${ d.name }]` }\r\n                                                </span>\r\n                                            )\r\n                                        )\r\n                                    )\r\n                                }\r\n                                {\r\n                                    currentCmd.args.map(\r\n                                        (d, i) => (\r\n                                            d.name === this.state.currentParam ? (\r\n                                                <span key={ `arg_${ d.name }` } >\r\n                                                    <b>\r\n                                                        { i ? \"|\" : \" \" }\r\n                                                        <u>\r\n                                                        {\r\n                                                            `${ d.name }${\r\n                                                                d.requireValue ? \"()\" : \"\"\r\n                                                            }`\r\n                                                        }\r\n                                                        </u>\r\n                                                    </b>\r\n                                                </span>\r\n                                            ) : (\r\n                                                <span key={ `arg_${ d.name }` } >\r\n                                                    {\r\n                                                        `${\r\n                                                            i ? \"|\" : \" \"\r\n                                                        }${ d.name }${\r\n                                                            d.requireValue ? \"()\" : \"\"\r\n                                                        }` }\r\n                                                </span>\r\n                                            )\r\n                                        )\r\n                                    )\r\n                                }\r\n                            </label>\r\n                            {\r\n                                this.state.currentParam === null ? null : (\r\n                                    <div key=\"cmd-descri\" >\r\n                                        <small>\r\n                                            <i>\r\n                                                { currentCmd.description }\r\n                                            </i>\r\n                                        </small>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                            {\r\n                                currentDescr ? (\r\n                                    <>\r\n                                        <div key=\"paramDescr\" style={{\r\n                                            borderTop: \"1px solid rgba(64, 172, 225, 0.5)\",\r\n                                            marginTop: \"0.5em\",\r\n                                            padding: \"0.2em 0 0.1em\"\r\n                                        }} >\r\n                                            <small>\r\n                                                { currentDescr }\r\n                                            </small>\r\n                                        </div>\r\n                                    </>\r\n                                ) : null\r\n                            }\r\n                        </div>\r\n                    ) : (\r\n                        <div key=\"unknow\" style={{\r\n                            color: \"rgb(64,172,225)\",\r\n                            border: `1px solid rgb(91,95,97)`,\r\n                            borderBottom: \"none\",\r\n                            padding: \"0.3em 0.7em\",\r\n                            background: `rgb(26,29,33)`,\r\n                            width: \"32em\"\r\n                        }} >\r\n                            <label>\r\n                                Unknown command\r\n                            </label>\r\n                        </div>\r\n                    )\r\n                }\r\n                {\r\n                    this.state.currentParam === null ? (\r\n                        <div key=\"list\" style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                            color: \"rgb(64,172,225)\",\r\n                            fontWeight: \"bold\",\r\n                            border: `1px solid rgb(91,95,97)`,\r\n                            background: `rgb(26,29,33)`\r\n                        }} >\r\n                        {\r\n                            this.state.list.map((item, i) => {\r\n                                return (\r\n                                    <div key={ i }\r\n                                    style={{\r\n                                        display: \"flex\"\r\n                                    }} >\r\n                                        <label key=\"name\" style={{\r\n                                            display: \"inline-block\",\r\n                                            padding: \"0.3em 1em\",\r\n                                            width: \"6em\",\r\n                                            background: i === this.state.focusIdx ? (\r\n                                                \"rgb(52,57,64)\"\r\n                                            ) : \"\"\r\n                                        }} >\r\n                                            { item }\r\n                                        </label>\r\n                                        <label key=\"descri\" style={{\r\n                                            display: \"inline-block\",\r\n                                            padding: \"0.3em 1em\",\r\n                                            width: \"24em\",\r\n                                            background: i === this.state.focusIdx ? (\r\n                                                \"rgb(52,57,64)\"\r\n                                            ) : \"\",\r\n                                            fontWeight: \"normal\"\r\n                                        }} >\r\n                                            { CommandDict[item].description }\r\n                                        </label>\r\n                                    </div>\r\n                                );\r\n                            })\r\n                        }\r\n                        </div>\r\n                    ) : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        AutoCompleter.currentRef = this;\r\n    }\r\n\r\n};\r\n","/*\r\n * @Author: Kanata You \r\n * @Date: 2020-10-22 00:32:54 \r\n * @Last Modified by: Kanata You\r\n * @Last Modified time: 2020-11-02 01:47:25\r\n */\r\n\r\nimport React, { Component } from \"react\";\r\nimport $ from \"jquery\";\r\nimport { addHotKey, removeHotKey, initHotKeyListeners } from \"../Shared/Listeners\";\r\nimport { CommandDict, parseParams } from \"../Handlers/CommandParser\";\r\nimport { AutoCompleter } from \"./AutoCompleter\";\r\n\r\n\r\nexport interface NewCommandProps {};\r\n\r\nexport interface NewCommandState {\r\n    active: boolean;\r\n};\r\n\r\nexport class NewCommand extends Component<NewCommandProps, NewCommandState> {\r\n\r\n    protected containerID: number;\r\n\r\n    protected history: Array<string>;\r\n    protected historyIdx: number;\r\n    protected historyLock: boolean;\r\n\r\n    public constructor(props: NewCommandProps) {\r\n        super(props);\r\n        this.state = {\r\n            active: false\r\n        };\r\n\r\n        this.containerID = Math.floor(Math.random() * 1000000);\r\n        this.history = [];\r\n        this.historyIdx = -1;\r\n        this.historyLock = false;\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div id={ `command-box-${ this.containerID }` } style={{\r\n                display: this.state.active ? \"flex\" : \"none\",\r\n                position: \"absolute\",\r\n                bottom: \"40px\",\r\n                left: 0,\r\n                width: \"100vw\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\"\r\n            }}\r\n            onKeyDown={\r\n                e => {\r\n                    e.stopPropagation();\r\n                }\r\n            } >\r\n                <input className=\"command-box\" type=\"text\" spellCheck=\"false\"\r\n                name={ `command-input-${ this.containerID }` }\r\n                onChange={\r\n                    e => {\r\n                        this.parse($(e.target).val()! as string | \"\");\r\n                        if (!this.historyLock) {\r\n                            this.historyIdx = -1;\r\n                        } else {\r\n                            this.historyLock = false;\r\n                        }\r\n                    }\r\n                }\r\n                style={{\r\n                    border: \"1px solid white\",\r\n                    width: \"calc(100vw - 200px)\",\r\n                    minHeight: \"1em\",\r\n                    padding: \"6px 12px\"\r\n                }} />\r\n                <AutoCompleter />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        initHotKeyListeners(`#command-box-${ this.containerID }`, false);\r\n        \r\n        addHotKey(`#command-box-${ this.containerID }`, [\"esc\"], () => {\r\n            this.close();\r\n        }, 10);\r\n        addHotKey(`#command-box-${ this.containerID }`, [\"tab\"], () => {\r\n            const autoCompleter = AutoCompleter.getRef();\r\n            if (autoCompleter) {\r\n                const name = autoCompleter.state.list[autoCompleter.state.focusIdx];\r\n                if (name) {\r\n                    const val: string = (\r\n                        $(`#command-box-${ this.containerID } input`).val()! as string\r\n                    ).trimLeft();\r\n                    if (val.includes(\" \")) {\r\n                        const curParam = autoCompleter.state.currentParam;\r\n                        if (curParam !== null) {\r\n                            const getter = parseParams(CommandDict[name], val);\r\n                            let check: (input: string) => Array<string> = () => [];\r\n                            let input: string = \"\";\r\n                            if (typeof curParam === \"string\") {\r\n                                check = CommandDict[name].args.filter(\r\n                                    d => d.name === curParam\r\n                                )[0].autoComplete || check;\r\n                                input = getter.getParam(curParam) || input;\r\n                            } else if (curParam - 1 < CommandDict[name].params.length) {\r\n                                check = CommandDict[name].params[\r\n                                    curParam - 1\r\n                                ].autoComplete || check;\r\n                                input = getter.getParam(\r\n                                    CommandDict[name].params[curParam - 1].name\r\n                                ) || input;\r\n                            }\r\n\r\n                            check(input);\r\n                        }\r\n                    } else {\r\n                        $(`#command-box-${ this.containerID } input`).val(\r\n                            name + \" \"\r\n                        );\r\n                        this.parse(name + \" \");\r\n                    }\r\n                }\r\n            }\r\n        }, 10);\r\n        addHotKey(`#command-box-${ this.containerID }`, [\"up\"], () => {\r\n            const autoCompleter = AutoCompleter.getRef();\r\n            if ((\r\n                (\r\n                    $(`#command-box-${ this.containerID } input`).val()! as string\r\n                ).length === 0 || this.historyIdx !== -1\r\n            ) && this.history.length) {\r\n                if (this.historyIdx === -1) {\r\n                    this.historyIdx = this.history.length - 1;\r\n                } else if (this.historyIdx >= 1) {\r\n                    this.historyIdx -= 1;\r\n                } else {\r\n                    return;\r\n                }\r\n                const cmd: string = this.history[this.historyIdx];\r\n                $(`#command-box-${ this.containerID } input`).val(cmd);\r\n                this.parse(cmd);\r\n                this.historyLock = true;\r\n            } else if (autoCompleter && autoCompleter.state.list.length) {\r\n                autoCompleter.setState({\r\n                    focusIdx: (\r\n                        autoCompleter.state.list.length + autoCompleter.state.focusIdx - 1\r\n                    ) % autoCompleter.state.list.length\r\n                });\r\n            }\r\n        }, 10);\r\n        addHotKey(`#command-box-${ this.containerID }`, [\"down\"], () => {\r\n            const autoCompleter = AutoCompleter.getRef();\r\n            if ((\r\n                (\r\n                    $(`#command-box-${ this.containerID } input`).val()! as string\r\n                ).length === 0 || this.historyIdx !== -1\r\n            ) && this.history.length) {\r\n                if (this.historyIdx !== -1 && this.historyIdx < this.history.length - 1) {\r\n                    this.historyLock = true;\r\n                    this.historyIdx += 1;\r\n                    const cmd: string = this.history[this.historyIdx];\r\n                    $(`#command-box-${ this.containerID } input`).val(cmd);\r\n                    this.parse(cmd);\r\n                }\r\n            } else if (autoCompleter && autoCompleter.state.list.length) {\r\n                autoCompleter.setState({\r\n                    focusIdx: (\r\n                        autoCompleter.state.focusIdx + 1\r\n                    ) % autoCompleter.state.list.length\r\n                });\r\n            }\r\n        }, 10);\r\n        addHotKey(`#command-box-${ this.containerID }`, [\"enter\"], () => {\r\n            this.run();\r\n        }, 10);\r\n    }\r\n\r\n    public componentDidUpdate(): void {\r\n        if (this.state.active) {\r\n            $(`#command-box-${ this.containerID } input`).val(\"\").focus();\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        AutoCompleter.hide();\r\n        removeHotKey(`#command-box-${ this.containerID }`, [\"esc\"]);\r\n        removeHotKey(`#command-box-${ this.containerID }`, [\"tab\"]);\r\n        removeHotKey(`#command-box-${ this.containerID }`, [\"up\"]);\r\n        removeHotKey(`#command-box-${ this.containerID }`, [\"down\"]);\r\n        removeHotKey(`#command-box-${ this.containerID }`, [\"enter\"]);\r\n    }\r\n\r\n    public create(): void {\r\n        if (!this.state.active) {\r\n            $(`#command-box-${ this.containerID } input`).val(\"\");\r\n            this.setState({\r\n                active: true\r\n            });\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        AutoCompleter.hide();\r\n        if (this.state.active) {\r\n            $(`#command-box-${ this.containerID } input`).val(\"\");\r\n            this.setState({\r\n                active: false\r\n            });\r\n        }\r\n    }\r\n\r\n    protected parse(value: string): void {\r\n        value = value.trimLeft();\r\n\r\n        const offset = $(`#command-box-${ this.containerID } input`).offset()!;\r\n        \r\n        if (value.replace(\" \", \"\").length === 0) {\r\n            AutoCompleter.hide();\r\n            return;\r\n        }\r\n\r\n        AutoCompleter.show(value, offset.left, offset.top);\r\n    }\r\n\r\n    protected run(): void {\r\n        const command: string = $(`#command-box-${ this.containerID } input`).val()! as string | \"\";\r\n        \r\n        this.history = [...this.history, command].slice(0, 10);\r\n\r\n        $(`#command-box-${ this.containerID } input`).val(\"\");\r\n        this.parse(\"\");\r\n    }\r\n\r\n};\r\n","/*\r\n * @Author: Kanata You \r\n * @Date: 2020-10-21 20:18:13 \r\n * @Last Modified by: Kanata You\r\n * @Last Modified time: 2020-10-22 00:48:21\r\n */\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Header } from \"../Components/Header\";\r\nimport { addHotKey, removeHotKey } from \"../Shared/Listeners\";\r\nimport { NewCommand } from \"../Components/NewCommand\";\r\n\r\n\r\nexport interface MainProps {};\r\n\r\nexport interface MainState {};\r\n\r\nexport class Main extends Component<MainProps, MainState> {\r\n\r\n    protected newCommand: React.RefObject<NewCommand>;\r\n\r\n    public constructor(props: MainProps) {\r\n        super(props);\r\n\r\n        this.state = {};\r\n\r\n        this.newCommand = React.createRef<NewCommand>();\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div className=\"container\" >\r\n                <Header />\r\n                <NewCommand ref={ this.newCommand } />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        addHotKey(\"body\", [\"ctrl\", \"enter\"], () => {\r\n            this.newCommand.current?.create();\r\n        }, 5);\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        removeHotKey(\"body\", [\"ctrl\", \"enter\"]);\r\n    }\r\n\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport { Main } from './WindowAppearance/Main';\n\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}